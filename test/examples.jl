point(A) = @cga3 point(A)
point_pair(A, B) = @cga3 point(A) ‚àß point(B)
circle(A, B, C) = @cga3 point(A) ‚àß point(B) ‚àß point(C)
line(A, B) = @cga3 point(A) ‚àß point(B) ‚àß n
sphere(A, B, C, D) = @cga3 point(A) ‚àß point(B) ‚àß point(C) ‚àß point(D)
plane(A, B, C) = @cga3 point(A) ‚àß point(B) ‚àß point(C) ‚àß n
circle_radius(X) = sqrt(@cga3(Float64, radius2(X::Trivector)))
sphere_radius(X) = sqrt(@cga3(Float64, radius2(X::Quadvector)))

@testset "3D Conformal Geometric Algebra" begin
  isnullvector(X) = isapprox(@cga3(Float64, magnitude2(X::Vector)), 0; atol = 1e-14)
  @test (@cga3 n ‚ãÖ nÃÑ) == (@cga3 nÃÑ ‚ãÖ n) == KVector{0,5}((-1.0,))
  @test (@cga3 magnitude2(n ‚¶ø n)) == (@cga3 magnitude2(nÃÑ ‚¶ø nÃÑ)) == KVector{0,5}((0,))
  A = sqrt(2) .* (1, 0, 0)
  B = sqrt(2) .* (0, 1, 0)
  C = sqrt(2) .* (0, 0, 1)
  D = sqrt(2) .* (-1, 0, 0)
  @test all(isnullvector, point.((A, B, C, D)))
  S1 = sphere(A, B, C, D)
  ùíú = point(A)
  @test (@cga3 unitize(($(ùíú .* 2))::Vector)) == ùíú
  O = (0, 0, 0)
  C1 = @cga3 center(S1::Quadvector)
  @test @cga3(unitize(C1::Vector)) ‚âà point(O)
  @test length(@cga3 weight(S1::Quadvector)) == 10
  @test @cga3(Float64, radius2(S1::Quadvector)) ‚âà sphere_radius(S1)^2 ‚âà 2.0
end;

struct Camera{T}
  optical_center::KVector{1,T,4,4} # ::Vector
  image_plane::KVector{3,T,4,4} # ::Trivector
end
Camera(A‚ÇÅ, A‚ÇÇ, A‚ÇÉ, A‚ÇÑ) = Camera(@pga3(point(A‚ÇÑ)), @pga3 point(A‚ÇÅ) ‚àß point(A‚ÇÇ) ‚àß point(A‚ÇÉ))

project_point(camera::Camera, x) = @pga3 begin
  line = camera.optical_center::Vector ‚àß point(x)
  line ‚à® camera.image_plane::Trivector
end

@testset "3D Projective Geometric Algebra" begin
  A = @pga3 point((1, 0, 0))
  B = @pga3 point((0, 1, 0))
  C = @pga3 point((1, 1, 0))
  D = @pga3 point((0, 0, 1))

  image_plane = @pga3 A::Vector ‚àß B::Vector ‚àß C::Vector
  optical_center = D

  camera = Camera(optical_center, image_plane)
  p = project_point(camera, (1.2, 1, 0))
  @test (@pga3 unitize(p::Vector)) == KVector{1,4}(-1.2, -1, 0, -1)
  p = project_point(camera, (1.2, 1, 2))
  @test (@pga3 unitize(p::Vector)) == KVector{1,4}(-1.2, -1, 0, 1)
  # The above operation is equivalent to an inversion through the optical center, as the original point is exactly at a distance of one focal length.
  @test (@pga3 unitize(‚àíD::Vector ‚©í point((1.2, 1, 2)) ‚©í antireverse(D::Vector))) == KVector{1,4}(1.2, 1, 0, -1)
end

count_expr_nodes(ex) = isa(ex, Expr) ? sum(count_expr_nodes, ex.args) : 1

@testset "3D rotations" begin
  function rotate_3d(x, a, b, Œ±)
    # Define a unit plane for the rotation.
    # The unitization ensures we don't need `a` and `b` to be orthogonal nor to be unit vectors.
    Œ† = @ga 3 unitize(a::1 ‚àß b::1)

    # Define rotation generator.
    Œ© = @ga 3 exp(-(0.5Œ±)::0 ‚üë Œ†::2)
    # Apply the rotation with the versor product of x by Œ©.
    @ga 3 x::1 << Œ©::(0, 2)
  end

  a = (1.0, 0.0, 0.0)
  b = (0.0, 1.0, 0.0)
  x = (1.0, 1.0, 0.0)
  Œ± = œÄ / 4

  # Define a plane for the rotation.
  Œ† = @ga 3 a::Vector ‚àß b::Vector

  # Define rotation bivector.
  œï = @ga 3 Œ±::Scalar ‚üë Œ†::Bivector

  # Define rotation generator.
  Œ© = @ga 3 exp(-(œï::Bivector) / 2::Scalar)
  @test grade.(Œ©) == (0, 2)
  @test all(Œ© .‚âà @ga 3 $(cos(0.5Œ±))::Scalar - Œ†::Bivector ‚üë $(sin(0.5Œ±))::Scalar)
  @test (@ga 3 Œ©::(Scalar, Bivector) ‚üë inverse(Œ©::(Scalar, Bivector))) == KVector{0,3}(1.0)

  x‚Ä≤ = @ga 3 x::1 << Œ©::(0, 2)
  @test x‚Ä≤ ‚âà KVector{1,3}(0.0, sqrt(2), 0.0)

  @test rotate_3d((1.0, 0.0, 0.0), a, b, œÄ/6) ‚âà KVector{1,3}(cos(œÄ/6), sin(œÄ/6), 0.0)
  @test rotate_3d((1.0, 0.0, 0.0), a, b, œÄ/3) ‚âà KVector{1,3}(cos(œÄ/3), sin(œÄ/3), 0.0)
  @test rotate_3d((2.0, 0.0, 0.0), a, b, œÄ/3) ‚âà KVector{1,3}(2cos(œÄ/3), 2sin(œÄ/3), 0.0)
  @test rotate_3d((2.0, 0.0, 0.0), a, 2 .* b, œÄ/3) ‚âà rotate_3d((2.0, 0.0, 0.0), a, b, œÄ/3)
  @test rotate_3d((2.0, 0.0, 0.0), a, (1/sqrt(2), 1/sqrt(2), 0.0), œÄ/3) ‚âà rotate_3d((2.0, 0.0, 0.0), a, b, œÄ/3)
  @test rotate_3d((2.0, 0.0, 0.0), a, (1.0, 1.0, 0.0), œÄ/3) ‚âà rotate_3d((2.0, 0.0, 0.0), a, b, œÄ/3)

  # Do it more succinctly.
  ex = @macroexpand @ga 3 begin
    Œ† = a::1 ‚üë b::1
    Œ© = exp((-(0.5Œ±)::0) ‚üë Œ†)
  end;
  @test_broken count_expr_nodes(ex) < 1000

  @test_skip begin
    x‚Ä≤‚Ä≤ = @ga 3 begin
      # Define unit plane for the rotation.
      Œ† = a::1 ‚üë b::1
      # Define rotation generator.
      Œ© = exp((-(0.5Œ±)::0) ‚üë Œ†)
      # Apply the rotation by sandwiching x with Œ©.
      Œ© ‚üë x::1 ‚üë reverse(Œ©)
    end
    x‚Ä≤‚Ä≤ === x‚Ä≤
  end
end;

@testset "Oriented 3D CGA" begin
  @testset "Inclusion of a point in a line segment" begin
    A = rand(3)
    B = rand(3)
    L = @cga3 point(A) ‚àß point(B) ‚àß n
    P = A .+ 0.5 .* (B .- A)

    function line_tests(P)
      t‚ÇÅ = @cga3 begin
        L = point(A) ‚àß point(B) ‚àß n
        (point(A) ‚àß point(P) ‚àß n) ‚üë L
      end
      t‚ÇÇ = @cga3 begin
        L = point(A) ‚àß point(B) ‚àß n
        (point(P) ‚àß point(B) ‚àß n) ‚üë L
      end
      (t‚ÇÅ, t‚ÇÇ)
    end
    PRECISION = 1e-15
    is_zero(x, y) = isapprox(x, y; atol = PRECISION)
    is_positive(x::Number) = x ‚â• -PRECISION
    is_zero_bivector(x) = is_zero(x, zero(KVector{2,Float64,5}))
    is_on_line((t‚ÇÅ, t‚ÇÇ)) = is_zero_bivector(t‚ÇÅ[2]) && is_zero_bivector(t‚ÇÇ[2])
    is_within_segment((t‚ÇÅ, t‚ÇÇ)) = is_positive(t‚ÇÅ[1][]) && is_positive(t‚ÇÇ[1][])

    ret = line_tests(A)
    t‚ÇÅ, t‚ÇÇ = ret
    @test is_on_line(ret)
    @test is_within_segment(ret)
    @test isapprox(t‚ÇÅ[1][], 0.0; atol = 1e-15) && t‚ÇÇ[1][] ‚â• -1e-15

    ret = line_tests(B)
    t‚ÇÅ, t‚ÇÇ = ret
    @test is_on_line(ret)
    @test is_within_segment(ret)
    @test t‚ÇÅ[1][] ‚â• -1e-15 && isapprox(t‚ÇÇ[1][], 0.0; atol = 1e-15)

    ret = line_tests(A .+ 0.5 .* (B .- A))
    @test is_on_line(ret)
    @test is_within_segment(ret)

    ret = line_tests(A .+ -0.1 .* (B .- A))
    @test is_on_line(ret)
    @test !is_within_segment(ret)

    ret = line_tests(A .+ 1.1 .* (B .- A))
    @test is_on_line(ret)
    @test !is_within_segment(ret)

    ret = line_tests((100.0, 100.0, 100.0))
    @test !is_on_line(ret)
    @test !is_within_segment(ret)
  end
end;
